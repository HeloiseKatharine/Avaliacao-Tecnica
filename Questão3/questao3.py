# -*- coding: utf-8 -*-
"""questao3.5

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1IxbUa8B4S3XiRxOMLEr5FUWlmd8O2DUe
"""

# Abrir o arquivo para leitura

# Arquivo de entrada
arq_in = open("algoc_in.txt", "r")

#Lendo o arquivo
lista_entrada = (arq_in.read())
lista_entrada = (lista_entrada[:lista_entrada.find('0')-1]).split('\n')
lista_entrada = list(map( lambda x : int(x), lista_entrada))

def DUP(no_pai):
  dup = no_pai * 2 
  return dup

def num_positivos(num):
  res = 1 #PLUSONE
  cont = 0
  
  while res <= num:
    cont +=1
    res = DUP(res)
    
    if res >= num:
      cont-=1
      res = res/2
      break
    
  return [res, cont]

def num_negativos(num):
  res = -1 #MINUSONE
  cont = 0
  
  while res >= num:
    cont +=1
    res = DUP(res)
    
    if res <= num:
      cont-=1
      res = res/2
      break
    
  return [res, cont]

def instrucoes(num):
  d = "DUP\n"
  i = "INC\n"

  if num > 0 :
    aux = num_positivos(num)
    if aux[1] < num:
      res = f'\nConstant {num}\nPLUSONE\n{d*aux[1]}{i*(num-int(aux[0]))}'
      return res
  else:
    aux = num_negativos(num)
    if aux[1] > num:
      res = f'\nConstant {num}\nMINUSONE\n{d*aux[1]}{i*((num-int(aux[0]))*-1)}'
      return res
      

#Abrindo o arquivo para gravação 
arq_out = open("algoc_out.txt", "w")
for i in lista_entrada:
  arq_out.write((instrucoes(i)))

